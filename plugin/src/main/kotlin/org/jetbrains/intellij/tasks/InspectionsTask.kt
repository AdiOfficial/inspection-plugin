package org.jetbrains.intellij.tasks

import groovy.lang.Closure
import groovy.lang.DelegatesTo
import org.gradle.api.Action
import org.gradle.api.file.FileCollection
import org.gradle.api.file.FileTree
import org.gradle.api.internal.ClosureBackedAction
import org.gradle.api.plugins.quality.CheckstyleReports
import org.gradle.api.reporting.Reporting
import org.gradle.api.tasks.*
import org.jdom2.input.SAXBuilder
import org.jetbrains.intellij.*
import org.jetbrains.intellij.Analyzer
import java.io.File
import org.gradle.api.Project as GradleProject

@Suppress("MemberVisibilityCanBePrivate")
@CacheableTask
open class InspectionsTask : AbstractInspectionsTask(), Reporting<CheckstyleReports> {

    /**
     * The class path containing the compiled classes for the source files to be analyzed.
     */
    @get:Classpath
    lateinit var classpath: FileCollection

    /**
     * Quick fix are to be executed if found fixable code style errors.
     * Result of refactorings will be put ot {@destinationQuickFixDirectory}.
     * Default value is the <tt>false</tt>.
     */
    var hasQuickFix: Boolean
        get() = extension.hasQuickFix
        set(value) {
            extension.hasQuickFix = value
        }

    /**
     * Destination dedicatory for quick fix result. Defaults to <tt>null</tt> means that reformat will be in-place.
     */
    var destinationQuickFixDirectory: File?
        get() = extension.destinationQuickFixDirectory
        set(value) {
            extension.destinationQuickFixDirectory = value
        }

    /**
     * {@inheritDoc}
     *
     *
     * The sources for this task are relatively relocatable even though it produces output that
     * includes absolute paths. This is a compromise made to ensure that results can be reused
     * between different builds. The downside is that up-to-date results, or results loaded
     * from cache can show different absolute paths than would be produced if the task was
     * executed.
     */
    @PathSensitive(PathSensitivity.RELATIVE)
    override fun getSource(): FileTree = super.getSource()


    /**
     * Whether or not this task will ignore failures and continue running the build.
     *
     * @return true if failures should be ignored
     */
    @Input
    override fun getIgnoreFailures(): Boolean = extension.isIgnoreFailures

    /**
     * The configuration file name to use. Replaces the `configFile` property.
     */
    var config: String
        get() = extension.config
        set(value) {
            extension.config = value
        }

    val reports = IdeaCheckstyleReports(this)

    /**
     * The reports to be generated by this task.
     */
    @Nested
    override fun getReports(): CheckstyleReports = reports

    /**
     * Tool (IDEA) version to use
     */
    @Suppress("unused")
    var toolVersion: String
        @Input get() = extension.toolVersion
        set(value) {
            extension.toolVersion = value
        }

    /**
     * The maximum number of errors that are tolerated before stopping the build
     * and setting the failure property (the last if ignoreFailures = false only)
     *
     * @return the maximum number of errors allowed
     */
    var maxErrors: Int
        @Input get() = extension.maxErrors
        set(value) {
            extension.maxErrors = value
        }

    /**
     * The maximum number of warnings that are tolerated before stopping the build
     * and setting the failure property (the last if ignoreFailures = false only)
     *
     * @return the maximum number of warnings allowed
     */
    var maxWarnings: Int
        @Input get() = extension.maxWarnings
        set(value) {
            extension.maxWarnings = value
        }

    /**
     * Whether rule violations are to be displayed on the console.
     *
     * @return false if violations should be displayed on console, true otherwise
     */
    @get:Console
    var quiet: Boolean
        @Input get() = extension.isQuiet
        set(value) {
            extension.isQuiet = value
        }

    /**
     * The configuration file to use.
     */
    @get:InputFile
    var configFile: File
        get() = File(project.rootProject.projectDir, config)
        set(value) {
            config = value.relativeTo(project.rootProject.projectDir).path
        }

    /**
     * Configures the reports to be generated by this task.
     *
     * The contained reports can be configured by name and closures. Example:
     *
     * <pre>
     * inspection {
     *     reports {
     *         html {
     *             destination "build/codenarc.html"
     *         }
     *         xml {
     *             destination "build/report.xml"
     *         }
     *     }
     * }
     * </pre>
     *
     *
     * @param closure The configuration
     * @return The reports container
     */
    override fun reports(
            @DelegatesTo(value = CheckstyleReports::class, strategy = Closure.DELEGATE_FIRST) closure: Closure<*>
    ): CheckstyleReports = reports(ClosureBackedAction(closure))

    /**
     * Configures the reports to be generated by this task.
     *
     * The contained reports can be configured by name and closures. Example:
     *
     * <pre>
     * checkstyleTask {
     *     reports {
     *         html {
     *             destination "build/codenarc.html"
     *         }
     *     }
     * }
     * </pre>
     *
     * @param configureAction The configuration
     * @return The reports container
     */
    override fun reports(configureAction: Action<in CheckstyleReports>): CheckstyleReports {
        configureAction.execute(reports)
        return reports
    }

    override fun getAnalyzerParameters(): AnalyzerParameters {
        val xmlReport = if (reports.xml.isEnabled) reports.xml.destination else null
        val htmlReport = if (reports.html.isEnabled) reports.html.destination else null
        val inspectionClasses = readInspectionClassesFromConfigFile()
        val reportParameters = ReportParameters(
                inspectionClasses.errors,
                inspectionClasses.warnings,
                inspectionClasses.infos,
                maxErrors,
                maxWarnings,
                quiet,
                xmlReport,
                htmlReport
        )
        val quickFixParameters = QuickFixParameters(destinationQuickFixDirectory, hasQuickFix)
        return AnalyzerParameters(reportParameters, quickFixParameters)
    }

    override fun createAnalyzer(loader: ClassLoader): Analyzer {
        val className = "org.jetbrains.idea.inspections.IdeaInspectionsRunner"
        @Suppress("UNCHECKED_CAST")
        val analyzerClass = loader.loadClass(className) as Class<Analyzer>
        val projectPath = project.rootProject.projectDir.absolutePath
        val mode = extension.testMode
        val inspectionClasses = readInspectionClassesFromConfigFile()
        val analyzer = analyzerClass.constructors.first().newInstance(
                projectPath,
                inspectionClasses.inheritFromIdea,
                inspectionClasses.classes,
                inspectionClasses.ideaProfile,
                mode
        )
        return analyzerClass.cast(analyzer)
    }

    private fun readInspectionClassesFromConfigFile(): InspectionClassesSuite {
        val builder = SAXBuilder()
        logger.info("Configuration file: ${configFile.path}")
        val document = builder.build(configFile)
        val root = document.rootElement

        val inheritFromIdea = root.getChild("inheritFromIdea")
        if (inheritFromIdea != null) {
            return InspectionClassesSuite(inheritFromIdea.getAttributeValue("profileName"))
        }
        val errorClasses = root.getChild("errors").children.map { it.getAttributeValue("class") }
        val warningClasses = root.getChild("warnings").children.map { it.getAttributeValue("class") }
        val infoClasses = root.getChild("infos").children.map { it.getAttributeValue("class") }

        return InspectionClassesSuite(errorClasses, warningClasses, infoClasses)
    }
}